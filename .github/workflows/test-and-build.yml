name: Test and Build

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    branches:
      - main

env:
  REGISTRY: docker.io
  IMAGE_NAME: {{DOCKER_USERNAME}}/{{DOCKER_IMAGE_NAME}}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24.3'

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Run unit tests
      run: go test -v ./...

    - name: Run tests with race detection
      run: go test -race -short ./...

    - name: Run tests with coverage
      run: |
        go test -coverprofile=coverage.out ./...
        go tool cover -func=coverage.out

    - name: Generate OpenAPI Documentation
      run: go run cmd/generate-openapi/main.go

    - name: Commit Updated OpenAPI Spec
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "OpenAPI Generator"
        if ! git diff --quiet docs/api/openapi.yaml; then
          git add docs/api/openapi.yaml
          git commit -m "Auto-update OpenAPI spec [skip ci]"
          git push
          echo "✅ OpenAPI specification updated and committed"
        else
          echo "✅ OpenAPI specification is up to date"
        fi

    - name: Test summary
      run: |
        echo "✅ All unit tests passed"
        echo "✅ Race condition tests passed"
        echo "✅ Coverage analysis completed"
        echo "✅ OpenAPI documentation generated"
        echo "✅ Ready to build Docker images"

  # Build and publish Docker image only if all tests pass
  build:
    runs-on: ubuntu-latest
    needs: test  # This job will only run if the test job succeeds
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha
        cache-to: type=gha,mode=max